	idnt	"boundary_trace0.c"
	fpu	1
	opt o+,ol+,op+,oc+,ot+,oj+,ob+,om+
	section	"CODE",code
	public	_GetTime
	cnop	0,4
_GetTime
	fmovem.x	l331,-(a7)
	movem.l	l330,-(a7)
	moveq	#0,d0
	move.b	14676989,d0
	fmove.l	d0,fp0
	fmul.d	#$401c600a7c5ac472,fp0
	fmul.d	#$412e848000000000,fp0
	fcmp.d	#$41e0000000000000,fp0
	fbge	l333
	fintrz	fp0
	fmove.l	fp0,d4
	bra	l334
l333:
	fsub.d	#$41e0000000000000,fp0
	fintrz	fp0
	fmove.l	fp0,d4
	bchg	#31,d4
l334:
	jsr	_GetStart
	move.l	d0,d3
	jsr	_GetStop
	move.l	d0,d1
	cmp.l	d1,d3
	bcc	l4
	move.l	d1,d2
	sub.l	d3,d2
	bra	l5
l4
	move.l	d3,d0
	sub.l	d1,d0
	move.l	#4294967295,d2
	sub.l	d0,d2
l5
	fmove.l	d2,fp1
	tst.l	d2
	bge.s	l335
	fadd.d	#4294967296,fp1
l335:
	fmove.l	d4,fp0
	tst.l	d4
	bge.s	l336
	fadd.d	#4294967296,fp0
l336:
	fmove.x	fp0,fp2
	fmove.x	fp1,fp0
	fdiv.x	fp2,fp0
l330	reg	d2/d3/d4
	movem.l	(a7)+,d2/d3/d4
l331	freg	fp2
	fmovem.x	(a7)+,l331
l332	equ	24
	rts
	fpu	1
	opt o+,ol+,op+,oc+,ot+,oj+,ob+,om+
	public	_Iterate
	cnop	0,4
_Iterate
	fmovem.x	l338,-(a7)
	movem.l	l337,-(a7)
	fmove.d	(12+l339,a7),fp6
	fmove.d	#$4000000000000000,fp5
	move.w	(22+l339,a7),d1
	fmove.d	#$0000000000000000,fp2
	fmove.d	#$0000000000000000,fp3
	fmove.d	#$0000000000000000,fp1
	fmove.d	#$0000000000000000,fp4
	move.w	d1,d0
	tst.w	d1
	beq	l142
l141
	fmove.x	fp2,fp0
	fmul.x	fp5,fp0
	fmul.x	fp1,fp0
	fmove.x	fp6,fp1
	fadd.x	fp0,fp1
	fmove.x	fp3,fp0
	fsub.x	fp4,fp0
	fmove.d	(4+l339,a7),fp2
	fadd.x	fp0,fp2
	fmove.x	fp2,fp3
	fmul.x	fp2,fp3
	fmove.x	fp1,fp4
	fmul.x	fp1,fp4
	subq.w	#1,d0
	beq	l142
	fmove.x	fp4,fp0
	fadd.x	fp3,fp0
	fcmp.d	#$4010000000000000,fp0
	fble	l141
l142
l337	reg
l338	freg	fp2/fp3/fp4/fp5/fp6
	fmovem.x	(a7)+,l338
l339	equ	60
	rts
; stacksize=60
	fpu	1
	opt o+,ol+,op+,oc+,ot+,oj+,ob+,om+
	public	_AddQueue
	cnop	0,4
_AddQueue
	fmovem.x	l341,-(a7)
	movem.l	l340,-(a7)
	move.l	(4+l342,a7),d1
	move.l	_Done,a1
	add.l	d1,a1
	moveq	#0,d0
	move.b	(a1),d0
	and.l	#2,d0
	bne	l18
	or.b	#2,(a1)
	move.l	_QueueHead,d0
	moveq	#1,d2
	add.l	d0,d2
	move.l	d2,_QueueHead
	lsl.l	#2,d0
	move.l	_Queue,a0
	move.l	d1,(0,a0,d0.l)
	move.l	_QueueHead,d0
	cmp.l	_QueueSize,d0
	bne	l18
	move.l	#0,_QueueHead
l18
l340	reg	d2
	movem.l	(a7)+,d2
l341	freg
l342	equ	4
	rts
; stacksize=4
	fpu	1
	opt o+,ol+,op+,oc+,ot+,oj+,ob+,om+
	public	_AllocateBoundary
	cnop	0,4
_AllocateBoundary
	fmovem.x	l344,-(a7)
	movem.l	l343,-(a7)
	moveq	#0,d1
	move.w	_resx,d1
	moveq	#0,d0
	move.w	_resy,d0
	move.l	d1,d2
	move.l	d0,d3
	swap	d2
	swap	d3
	mulu.w	d0,d2
	mulu.w	d1,d3
	mulu.w	d0,d1
	add.w	d3,d2
	swap	d2
	clr.w	d2
	add.l	d2,d1
	move.l	d1,d0
	move.l	d0,_DataSize
	move.l	d0,_DoneSize
	lsl.l	#4,d1
	move.l	d1,_QueueSize
	move.l	_SysBase,a6
	move.l	#65537,d1
	jsr	-198(a6)
	move.l	d0,_Data
	move.l	_DoneSize,d0
	move.l	_SysBase,a6
	move.l	#65537,d1
	jsr	-198(a6)
	move.l	d0,_Done
	move.l	_QueueSize,d0
	move.l	_SysBase,a6
	move.l	#65537,d1
	jsr	-198(a6)
	move.l	d0,_Queue
	tst.l	_Data
	beq	l21
	tst.l	_Done
	beq	l21
	tst.l	_Queue
	bne	l22
l21
	moveq	#0,d0
	bra	l25
l22
	moveq	#1,d0
l25
l343	reg	a6/d2/d3
	movem.l	(a7)+,a6/d2/d3
l344	freg
l345	equ	12
	rts
	fpu	1
	opt o+,ol+,op+,oc+,ot+,oj+,ob+,om+
	public	_DeallocateBoundary
	cnop	0,4
_DeallocateBoundary
	fmovem.x	l347,-(a7)
	movem.l	l346,-(a7)
	tst.l	_Queue
	beq	l29
	move.l	_QueueSize,d0
	move.l	_Queue,a1
	move.l	_SysBase,a6
	jsr	-210(a6)
l29
	tst.l	_Done
	beq	l31
	move.l	_DoneSize,d0
	move.l	_Done,a1
	move.l	_SysBase,a6
	jsr	-210(a6)
l31
	tst.l	_Data
	beq	l33
	move.l	_DataSize,d0
	move.l	_Data,a1
	move.l	_SysBase,a6
	jsr	-210(a6)
l33
l346	reg	a6
	movem.l	(a7)+,a6
l347	freg
l348	equ	4
	rts
	fpu	1
	opt o+,ol+,op+,oc+,ot+,oj+,ob+,om+
	public	_Load
	cnop	0,4
_Load
	fmovem.x	l350,-(a7)
	movem.l	l349,-(a7)
	move.l	(4+l351,a7),d6
	move.l	_Done,a0
	moveq	#0,d0
	move.b	(0,a0,d6.l),d0
	and.l	#1,d0
	beq	l37
	move.l	_Data,a0
	moveq	#0,d0
	move.b	(0,a0,d6.l),d0
	bra	l34
l37
	moveq	#0,d5
	move.w	_resx,d5
	move.l	d5,-(a7)
	move.l	d6,-(a7)
	public	__ldivu
	jsr	__ldivu
	addq.w	#8,a7
	move.l	d1,d0
	move.l	d0,d4
	move.l	d5,-(a7)
	move.l	d6,-(a7)
	public	__ldivu
	jsr	__ldivu
	addq.w	#8,a7
	move.l	d0,d5
	moveq	#0,d0
	move.w	_MaxIter,d0
	moveq	#0,d1
	move.w	d5,d1
	fmove.l	d1,fp1
	fmul.d	_stepi,fp1
	fadd.d	_mini,fp1
	moveq	#0,d1
	move.w	d4,d1
	fmove.l	d1,fp2
	fmul.d	_stepr,fp2
	fmove.d	_minr,fp0
	fadd.x	fp2,fp0
	jsr	_SingleIterateAsm
	move.w	d0,d3
	moveq	#0,d2
	move.w	d3,d2
	moveq	#0,d1
	move.w	d5,d1
	moveq	#0,d0
	move.w	d4,d0
	jsr	_Put8BitPixel
	move.l	_Done,a0
	add.l	d6,a0
	or.b	#1,(a0)
	move.l	_Data,a0
	add.l	d6,a0
	move.b	d3,(a0)
	moveq	#0,d0
	move.b	(a0),d0
l34
l349	reg	d2/d3/d4/d5/d6
	movem.l	(a7)+,d2/d3/d4/d5/d6
l350	freg	fp2
	fmovem.x	(a7)+,l350
l351	equ	32
	rts
	fpu	1
	opt o+,ol+,op+,oc+,ot+,oj+,ob+,om+
	public	_Scan
	cnop	0,4
_Scan
	sub.w	#44,a7
	fmovem.x	l353,-(a7)
	movem.l	l352,-(a7)
	move.l	(48+l354,a7),d6
	moveq	#0,d0
	move.w	_resx,d0
	move.l	d0,-(a7)
	move.l	d1,-(a7)
	fmove.x	fp0,-(a7)
	fmove.x	fp1,-(a7)
	move.l	a1,-(a7)
	move.l	d0,-(a7)
	move.l	d6,-(a7)
	public	__ldivu
	jsr	__ldivu
	addq.w	#8,a7
	move.l	d1,d0
	move.l	(a7)+,a1
	move.l	d0,(32+l354,a7)
	fmove.x	(a7)+,fp1
	fmove.x	(a7)+,fp0
	opt	om-
	movem.l	(a7)+,d1
	opt	om+
	opt	om-
	movem.l	(a7)+,d0
	opt	om+
	move.l	d0,-(a7)
	move.l	d1,-(a7)
	fmove.x	fp0,-(a7)
	fmove.x	fp1,-(a7)
	move.l	a1,-(a7)
	move.l	d0,-(a7)
	move.l	d6,-(a7)
	public	__ldivu
	jsr	__ldivu
	addq.w	#8,a7
	move.l	(a7)+,a1
	move.l	d0,(36+l354,a7)
	fmove.x	(a7)+,fp1
	fmove.x	(a7)+,fp0
	opt	om-
	movem.l	(a7)+,d1
	opt	om+
	opt	om-
	movem.l	(a7)+,d0
	opt	om+
	move.l	_Done,a0
	moveq	#0,d0
	move.b	(0,a0,d6.l),d0
	and.l	#1,d0
	beq	l161
	move.l	_Data,a0
	moveq	#0,d7
	move.b	(0,a0,d6.l),d7
	move.l	d7,(8+l354,a7)
	bra	l158
l161
	move.w	(2+l354,a7),d4
	move.w	(6+l354,a7),d5
	moveq	#0,d0
	move.w	_MaxIter,d0
	moveq	#0,d1
	move.w	d5,d1
	fmove.l	d1,fp1
	fmul.d	_stepi,fp1
	fadd.d	_mini,fp1
	moveq	#0,d1
	move.w	d4,d1
	fmove.l	d1,fp2
	fmul.d	_stepr,fp2
	fmove.d	_minr,fp0
	fadd.x	fp2,fp0
	jsr	_SingleIterateAsm
	move.w	d0,d3
	moveq	#0,d2
	move.w	d3,d2
	moveq	#0,d1
	move.w	d5,d1
	moveq	#0,d0
	move.w	d4,d0
	jsr	_Put8BitPixel
	move.l	_Done,a0
	add.l	d6,a0
	or.b	#1,(a0)
	move.l	_Data,a0
	add.l	d6,a0
	move.b	d3,(a0)
	moveq	#0,d0
	move.b	(a0),d0
	move.l	d0,(8+l354,a7)
l158
	tst.l	(0+l354,a7)
	bhi	l40
	move.l	#0,(12+l354,a7)
	bra	l41
l40
	moveq	#1,d7
	move.l	d7,(12+l354,a7)
l41
	moveq	#0,d0
	move.w	_resx,d0
	subq.l	#1,d0
	cmp.l	(0+l354,a7),d0
	bhi	l43
	move.l	#0,(0+l354,a7)
	bra	l44
l43
	moveq	#1,d7
	move.l	d7,(0+l354,a7)
l44
	tst.l	(4+l354,a7)
	bhi	l46
	move.l	#0,(16+l354,a7)
	bra	l47
l46
	moveq	#1,d7
	move.l	d7,(16+l354,a7)
l47
	moveq	#0,d0
	move.w	_resy,d0
	subq.l	#1,d0
	cmp.l	(4+l354,a7),d0
	bhi	l49
	move.l	#0,(4+l354,a7)
	bra	l50
l49
	moveq	#1,d7
	move.l	d7,(4+l354,a7)
l50
	tst.l	(12+l354,a7)
	beq	l54
	move.l	d6,d0
	subq.l	#1,d0
	move.l	d0,(20+l354,a7)
	move.l	_Done,a0
	add.l	(20+l354,a7),a0
	moveq	#0,d0
	move.b	(a0),d0
	and.l	#1,d0
	beq	l165
	move.l	_Data,a0
	add.l	(20+l354,a7),a0
	moveq	#0,d7
	move.b	(a0),d7
	move.l	d7,(24+l354,a7)
	bra	l162
l165
	moveq	#0,d5
	move.w	_resx,d5
	move.l	a1,-(a7)
	move.l	d5,-(a7)
	move.l	(28+l354,a7),-(a7)
	public	__ldivu
	jsr	__ldivu
	addq.w	#8,a7
	move.l	d1,d0
	move.l	(a7)+,a1
	move.l	d0,d4
	move.l	a1,-(a7)
	move.l	d5,-(a7)
	move.l	(28+l354,a7),-(a7)
	public	__ldivu
	jsr	__ldivu
	addq.w	#8,a7
	move.l	(a7)+,a1
	move.l	d0,d5
	moveq	#0,d0
	move.w	_MaxIter,d0
	moveq	#0,d1
	move.w	d5,d1
	fmove.l	d1,fp1
	fmul.d	_stepi,fp1
	fadd.d	_mini,fp1
	moveq	#0,d1
	move.w	d4,d1
	fmove.l	d1,fp2
	fmul.d	_stepr,fp2
	fmove.d	_minr,fp0
	fadd.x	fp2,fp0
	jsr	_SingleIterateAsm
	move.w	d0,d3
	moveq	#0,d2
	move.w	d3,d2
	moveq	#0,d1
	move.w	d5,d1
	moveq	#0,d0
	move.w	d4,d0
	jsr	_Put8BitPixel
	move.l	_Done,a0
	add.l	(20+l354,a7),a0
	or.b	#1,(a0)
	move.l	_Data,a0
	add.l	(20+l354,a7),a0
	move.b	d3,(a0)
	moveq	#0,d0
	move.b	(a0),d0
	move.l	d0,(24+l354,a7)
l162
	move.l	(24+l354,a7),d7
	cmp.l	(8+l354,a7),d7
	beq	l54
	moveq	#1,d7
	move.l	d7,(20+l354,a7)
	bra	l55
l54
	move.l	#0,(20+l354,a7)
l55
	tst.l	(0+l354,a7)
	beq	l58
	moveq	#1,d0
	add.l	d6,d0
	move.l	d0,(24+l354,a7)
	move.l	_Done,a0
	add.l	(24+l354,a7),a0
	moveq	#0,d0
	move.b	(a0),d0
	and.l	#1,d0
	beq	l169
	move.l	_Data,a0
	add.l	(24+l354,a7),a0
	moveq	#0,d7
	move.b	(a0),d7
	move.l	d7,(28+l354,a7)
	bra	l166
l169
	moveq	#0,d5
	move.w	_resx,d5
	move.l	a1,-(a7)
	move.l	d5,-(a7)
	move.l	(32+l354,a7),-(a7)
	public	__ldivu
	jsr	__ldivu
	addq.w	#8,a7
	move.l	d1,d0
	move.l	(a7)+,a1
	move.l	d0,d4
	move.l	a1,-(a7)
	move.l	d5,-(a7)
	move.l	(32+l354,a7),-(a7)
	public	__ldivu
	jsr	__ldivu
	addq.w	#8,a7
	move.l	(a7)+,a1
	move.l	d0,d5
	moveq	#0,d0
	move.w	_MaxIter,d0
	moveq	#0,d1
	move.w	d5,d1
	fmove.l	d1,fp1
	fmul.d	_stepi,fp1
	fadd.d	_mini,fp1
	moveq	#0,d1
	move.w	d4,d1
	fmove.l	d1,fp2
	fmul.d	_stepr,fp2
	fmove.d	_minr,fp0
	fadd.x	fp2,fp0
	jsr	_SingleIterateAsm
	move.w	d0,d3
	moveq	#0,d2
	move.w	d3,d2
	moveq	#0,d1
	move.w	d5,d1
	moveq	#0,d0
	move.w	d4,d0
	jsr	_Put8BitPixel
	move.l	_Done,a0
	add.l	(24+l354,a7),a0
	or.b	#1,(a0)
	move.l	_Data,a0
	add.l	(24+l354,a7),a0
	move.b	d3,(a0)
	moveq	#0,d0
	move.b	(a0),d0
	move.l	d0,(28+l354,a7)
l166
	move.l	(28+l354,a7),d7
	cmp.l	(8+l354,a7),d7
	beq	l58
	moveq	#1,d7
	move.l	d7,(24+l354,a7)
	bra	l59
l58
	move.l	#0,(24+l354,a7)
l59
	tst.l	(16+l354,a7)
	beq	l62
	moveq	#0,d0
	move.w	_resx,d0
	move.l	d0,(28+l354,a7)
	move.l	d6,d0
	sub.l	(28+l354,a7),d0
	move.l	d0,(32+l354,a7)
	move.l	_Done,a0
	add.l	(32+l354,a7),a0
	moveq	#0,d0
	move.b	(a0),d0
	and.l	#1,d0
	beq	l173
	move.l	_Data,a0
	add.l	(32+l354,a7),a0
	moveq	#0,d7
	move.b	(a0),d7
	move.l	d7,(36+l354,a7)
	bra	l170
l173
	move.l	a1,-(a7)
	move.l	(32+l354,a7),-(a7)
	move.l	(40+l354,a7),-(a7)
	public	__ldivu
	jsr	__ldivu
	addq.w	#8,a7
	move.l	d1,d0
	move.l	(a7)+,a1
	move.l	d0,d4
	move.l	a1,-(a7)
	move.l	(32+l354,a7),-(a7)
	move.l	(40+l354,a7),-(a7)
	public	__ldivu
	jsr	__ldivu
	addq.w	#8,a7
	move.l	(a7)+,a1
	move.l	d0,d5
	moveq	#0,d0
	move.w	_MaxIter,d0
	moveq	#0,d1
	move.w	d5,d1
	fmove.l	d1,fp1
	fmul.d	_stepi,fp1
	fadd.d	_mini,fp1
	moveq	#0,d1
	move.w	d4,d1
	fmove.l	d1,fp2
	fmul.d	_stepr,fp2
	fmove.d	_minr,fp0
	fadd.x	fp2,fp0
	jsr	_SingleIterateAsm
	move.w	d0,d3
	moveq	#0,d2
	move.w	d3,d2
	moveq	#0,d1
	move.w	d5,d1
	moveq	#0,d0
	move.w	d4,d0
	jsr	_Put8BitPixel
	move.l	_Done,a0
	add.l	(32+l354,a7),a0
	or.b	#1,(a0)
	move.l	_Data,a0
	add.l	(32+l354,a7),a0
	move.b	d3,(a0)
	moveq	#0,d0
	move.b	(a0),d0
	move.l	d0,(36+l354,a7)
l170
	move.l	(36+l354,a7),d7
	cmp.l	(8+l354,a7),d7
	beq	l62
	moveq	#1,d7
	move.l	d7,(28+l354,a7)
	bra	l63
l62
	move.l	#0,(28+l354,a7)
l63
	tst.l	(4+l354,a7)
	beq	l66
	moveq	#0,d0
	move.w	_resx,d0
	move.l	d0,(32+l354,a7)
	move.l	d6,d0
	add.l	(32+l354,a7),d0
	move.l	d0,(36+l354,a7)
	move.l	_Done,a0
	add.l	(36+l354,a7),a0
	moveq	#0,d0
	move.b	(a0),d0
	and.l	#1,d0
	beq	l177
	move.l	_Data,a0
	add.l	(36+l354,a7),a0
	moveq	#0,d7
	move.b	(a0),d7
	move.l	d7,(40+l354,a7)
	bra	l174
l177
	move.l	a1,-(a7)
	move.l	(36+l354,a7),-(a7)
	move.l	(44+l354,a7),-(a7)
	public	__ldivu
	jsr	__ldivu
	addq.w	#8,a7
	move.l	d1,d0
	move.l	(a7)+,a1
	move.l	d0,d4
	move.l	a1,-(a7)
	move.l	(36+l354,a7),-(a7)
	move.l	(44+l354,a7),-(a7)
	public	__ldivu
	jsr	__ldivu
	addq.w	#8,a7
	move.l	(a7)+,a1
	move.l	d0,d5
	moveq	#0,d0
	move.w	_MaxIter,d0
	moveq	#0,d1
	move.w	d5,d1
	fmove.l	d1,fp1
	fmul.d	_stepi,fp1
	fadd.d	_mini,fp1
	moveq	#0,d1
	move.w	d4,d1
	fmove.l	d1,fp2
	fmul.d	_stepr,fp2
	fmove.d	_minr,fp0
	fadd.x	fp2,fp0
	jsr	_SingleIterateAsm
	move.w	d0,d3
	moveq	#0,d2
	move.w	d3,d2
	moveq	#0,d1
	move.w	d5,d1
	moveq	#0,d0
	move.w	d4,d0
	jsr	_Put8BitPixel
	move.l	_Done,a0
	add.l	(36+l354,a7),a0
	or.b	#1,(a0)
	move.l	_Data,a0
	add.l	(36+l354,a7),a0
	move.b	d3,(a0)
	moveq	#0,d0
	move.b	(a0),d0
	move.l	d0,(40+l354,a7)
l174
	move.l	(40+l354,a7),d7
	cmp.l	(8+l354,a7),d7
	beq	l66
	moveq	#1,d7
	move.l	d7,(8+l354,a7)
	bra	l67
l66
	move.l	#0,(8+l354,a7)
l67
	tst.l	(20+l354,a7)
	beq	l183
	move.l	d6,d0
	subq.l	#1,d0
	move.l	d0,(32+l354,a7)
	move.l	_Done,d4
	add.l	(32+l354,a7),d4
	move.l	d4,a0
	moveq	#0,d0
	move.b	(a0),d0
	and.l	#2,d0
	bne	l183
	move.l	d4,a0
	or.b	#2,(a0)
	move.l	_QueueHead,d0
	moveq	#1,d7
	add.l	d0,d7
	move.l	d7,_QueueHead
	lsl.l	#2,d0
	move.l	_Queue,a0
	move.l	(32+l354,a7),(0,a0,d0.l)
	move.l	_QueueHead,d0
	cmp.l	_QueueSize,d0
	bne	l183
	move.l	#0,_QueueHead
l183
	tst.l	(24+l354,a7)
	beq	l189
	moveq	#1,d0
	add.l	d6,d0
	move.l	d0,(32+l354,a7)
	move.l	_Done,d3
	add.l	(32+l354,a7),d3
	move.l	d3,a0
	moveq	#0,d0
	move.b	(a0),d0
	and.l	#2,d0
	bne	l189
	move.l	d3,a0
	or.b	#2,(a0)
	move.l	_QueueHead,d0
	moveq	#1,d7
	add.l	d0,d7
	move.l	d7,_QueueHead
	lsl.l	#2,d0
	move.l	_Queue,a0
	move.l	(32+l354,a7),(0,a0,d0.l)
	move.l	_QueueHead,d0
	cmp.l	_QueueSize,d0
	bne	l189
	move.l	#0,_QueueHead
l189
	tst.l	(28+l354,a7)
	beq	l195
	moveq	#0,d0
	move.w	_resx,d0
	move.l	d6,d7
	sub.l	d0,d7
	move.l	d7,(32+l354,a7)
	move.l	_Done,d5
	add.l	(32+l354,a7),d5
	move.l	d5,a0
	moveq	#0,d0
	move.b	(a0),d0
	and.l	#2,d0
	bne	l195
	move.l	d5,a0
	or.b	#2,(a0)
	move.l	_QueueHead,d0
	moveq	#1,d7
	add.l	d0,d7
	move.l	d7,_QueueHead
	lsl.l	#2,d0
	move.l	_Queue,a0
	move.l	(32+l354,a7),(0,a0,d0.l)
	move.l	_QueueHead,d0
	cmp.l	_QueueSize,d0
	bne	l195
	move.l	#0,_QueueHead
l195
	tst.l	(8+l354,a7)
	beq	l201
	moveq	#0,d0
	move.w	_resx,d0
	add.l	d6,d0
	move.l	d0,(32+l354,a7)
	move.l	_Done,a2
	add.l	(32+l354,a7),a2
	moveq	#0,d0
	move.b	(a2),d0
	and.l	#2,d0
	bne	l201
	or.b	#2,(a2)
	move.l	_QueueHead,d0
	moveq	#1,d7
	add.l	d0,d7
	move.l	d7,_QueueHead
	lsl.l	#2,d0
	move.l	_Queue,a0
	move.l	(32+l354,a7),(0,a0,d0.l)
	move.l	_QueueHead,d0
	cmp.l	_QueueSize,d0
	bne	l201
	move.l	#0,_QueueHead
l201
	tst.l	(16+l354,a7)
	beq	l207
	tst.l	(12+l354,a7)
	beq	l207
	tst.l	(20+l354,a7)
	bne	l76
	tst.l	(28+l354,a7)
	beq	l207
l76
	moveq	#0,d0
	move.w	_resx,d0
	neg.l	d0
	add.l	d6,d0
	subq.l	#1,d0
	move.l	d0,(32+l354,a7)
	move.l	_Done,a4
	add.l	(32+l354,a7),a4
	moveq	#0,d0
	move.b	(a4),d0
	and.l	#2,d0
	bne	l207
	or.b	#2,(a4)
	move.l	_QueueHead,d0
	moveq	#1,d7
	add.l	d0,d7
	move.l	d7,_QueueHead
	lsl.l	#2,d0
	move.l	_Queue,a0
	move.l	(32+l354,a7),(0,a0,d0.l)
	move.l	_QueueHead,d0
	cmp.l	_QueueSize,d0
	bne	l207
	move.l	#0,_QueueHead
l207
	tst.l	(16+l354,a7)
	beq	l213
	tst.l	(0+l354,a7)
	beq	l213
	tst.l	(24+l354,a7)
	bne	l81
	tst.l	(28+l354,a7)
	beq	l213
l81
	moveq	#0,d0
	move.w	_resx,d0
	neg.l	d0
	add.l	d6,d0
	moveq	#1,d7
	add.l	d0,d7
	move.l	d7,(16+l354,a7)
	move.l	_Done,a1
	add.l	(16+l354,a7),a1
	moveq	#0,d0
	move.b	(a1),d0
	and.l	#2,d0
	bne	l213
	or.b	#2,(a1)
	move.l	_QueueHead,d0
	moveq	#1,d7
	add.l	d0,d7
	move.l	d7,_QueueHead
	lsl.l	#2,d0
	move.l	_Queue,a0
	move.l	(16+l354,a7),(0,a0,d0.l)
	move.l	_QueueHead,d0
	cmp.l	_QueueSize,d0
	bne	l213
	move.l	#0,_QueueHead
l213
	tst.l	(4+l354,a7)
	beq	l219
	tst.l	(12+l354,a7)
	beq	l219
	tst.l	(20+l354,a7)
	bne	l86
	tst.l	(8+l354,a7)
	beq	l219
l86
	moveq	#0,d0
	move.w	_resx,d0
	add.l	d6,d0
	subq.l	#1,d0
	move.l	d0,(12+l354,a7)
	move.l	_Done,a5
	add.l	(12+l354,a7),a5
	moveq	#0,d0
	move.b	(a5),d0
	and.l	#2,d0
	bne	l219
	or.b	#2,(a5)
	move.l	_QueueHead,d0
	moveq	#1,d7
	add.l	d0,d7
	move.l	d7,_QueueHead
	lsl.l	#2,d0
	move.l	_Queue,a0
	move.l	(12+l354,a7),(0,a0,d0.l)
	move.l	_QueueHead,d0
	cmp.l	_QueueSize,d0
	bne	l219
	move.l	#0,_QueueHead
l219
	tst.l	(4+l354,a7)
	beq	l225
	tst.l	(0+l354,a7)
	beq	l225
	tst.l	(24+l354,a7)
	bne	l91
	tst.l	(8+l354,a7)
	beq	l225
l91
	moveq	#0,d0
	move.w	_resx,d0
	add.l	d6,d0
	moveq	#1,d7
	add.l	d0,d7
	move.l	d7,(0+l354,a7)
	move.l	_Done,a3
	add.l	(0+l354,a7),a3
	moveq	#0,d0
	move.b	(a3),d0
	and.l	#2,d0
	bne	l225
	or.b	#2,(a3)
	move.l	_QueueHead,d0
	moveq	#1,d7
	add.l	d0,d7
	move.l	d7,_QueueHead
	lsl.l	#2,d0
	move.l	_Queue,a0
	move.l	(0+l354,a7),(0,a0,d0.l)
	move.l	_QueueHead,d0
	cmp.l	_QueueSize,d0
	bne	l225
	move.l	#0,_QueueHead
l225
l352	reg	a2/a3/a4/a5/d2/d3/d4/d5/d6/d7
	movem.l	(a7)+,a2/a3/a4/a5/d2/d3/d4/d5/d6/d7
l353	freg	fp2
	fmovem.x	(a7)+,l353
l354	equ	52
	add.w	#44,a7
	rts
	fpu	1
	opt o+,ol+,op+,oc+,ot+,oj+,ob+,om+
	public	_main
	cnop	0,4
_main
	sub.w	#16,a7
	fmovem.x	l356,-(a7)
	movem.l	l355,-(a7)
	move.l	#2561,d0
	move.l	#1280,d1
	move.l	#720,d2
	jsr	_Set8BitMode
	move.l	d0,_newbuffer
	bne	l99
	moveq	#1,d0
	bra	l96
l99
	jsr	_MultiTaskOff
	jsr	_MouseOff
	move.w	#256,_MaxIter
	move.l	#$c0020000,_minr
	move.l	#$00000000,4+_minr
	move.l	#$3ff40000,_maxr
	move.l	#$00000000,4+_maxr
	move.l	#$bff40000,_mini
	move.l	#$00000000,4+_mini
	move.l	#$3ff40000,_maxi
	move.l	#$00000000,4+_maxi
	fmove.d	_maxr,fp1
	fsub.d	_minr,fp1
	moveq	#0,d0
	move.w	_resx,d0
	fmove.l	d0,fp0
	fdiv.x	fp0,fp1
	fmove.d	fp1,_stepr
	fmove.d	_maxi,fp1
	fsub.d	_mini,fp1
	moveq	#0,d0
	move.w	_resy,d0
	fmove.l	d0,fp0
	fdiv.x	fp0,fp1
	fmove.d	fp1,_stepi
	moveq	#0,d0
	moveq	#0,d1
	moveq	#0,d2
	moveq	#0,d3
	jsr	_SetColor
	moveq	#1,d4
	move.w	#255,d5
l303
	jsr	_rand
	move.l	d0,-(a7)
	move.l	a0,-(a7)
	move.l	a1,-(a7)
	move.l	#256,-(a7)
	move.l	d0,-(a7)
	public	__ldivs
	jsr	__ldivs
	addq.w	#8,a7
	move.l	d1,d0
	move.l	(a7)+,a1
	move.l	(a7)+,a0
	move.l	d0,d3
	opt	om-
	movem.l	(a7)+,d0
	opt	om+
	jsr	_rand
	move.l	d0,-(a7)
	move.l	a0,-(a7)
	move.l	a1,-(a7)
	move.l	#256,-(a7)
	move.l	d0,-(a7)
	public	__ldivs
	jsr	__ldivs
	addq.w	#8,a7
	move.l	d1,d0
	move.l	(a7)+,a1
	move.l	(a7)+,a0
	move.l	d0,d2
	opt	om-
	movem.l	(a7)+,d0
	opt	om+
	jsr	_rand
	move.l	d0,-(a7)
	move.l	a0,-(a7)
	move.l	a1,-(a7)
	move.l	#256,-(a7)
	move.l	d0,-(a7)
	public	__ldivs
	jsr	__ldivs
	addq.w	#8,a7
	move.l	d1,d0
	move.l	(a7)+,a1
	move.l	(a7)+,a0
	move.l	d0,d1
	opt	om-
	movem.l	(a7)+,d0
	opt	om+
	moveq	#0,d0
	move.w	d4,d0
	jsr	_SetColor
	addq.w	#1,d4
	jsr	_rand
	move.l	d0,-(a7)
	move.l	a0,-(a7)
	move.l	a1,-(a7)
	move.l	#256,-(a7)
	move.l	d0,-(a7)
	public	__ldivs
	jsr	__ldivs
	addq.w	#8,a7
	move.l	d1,d0
	move.l	(a7)+,a1
	move.l	(a7)+,a0
	move.l	d0,d3
	opt	om-
	movem.l	(a7)+,d0
	opt	om+
	jsr	_rand
	move.l	d0,-(a7)
	move.l	a0,-(a7)
	move.l	a1,-(a7)
	move.l	#256,-(a7)
	move.l	d0,-(a7)
	public	__ldivs
	jsr	__ldivs
	addq.w	#8,a7
	move.l	d1,d0
	move.l	(a7)+,a1
	move.l	(a7)+,a0
	move.l	d0,d2
	opt	om-
	movem.l	(a7)+,d0
	opt	om+
	jsr	_rand
	move.l	d0,-(a7)
	move.l	a0,-(a7)
	move.l	a1,-(a7)
	move.l	#256,-(a7)
	move.l	d0,-(a7)
	public	__ldivs
	jsr	__ldivs
	addq.w	#8,a7
	move.l	d1,d0
	move.l	(a7)+,a1
	move.l	(a7)+,a0
	move.l	d0,d1
	opt	om-
	movem.l	(a7)+,d0
	opt	om+
	moveq	#0,d0
	move.w	d4,d0
	jsr	_SetColor
	addq.w	#1,d4
	jsr	_rand
	move.l	d0,-(a7)
	move.l	a0,-(a7)
	move.l	a1,-(a7)
	move.l	#256,-(a7)
	move.l	d0,-(a7)
	public	__ldivs
	jsr	__ldivs
	addq.w	#8,a7
	move.l	d1,d0
	move.l	(a7)+,a1
	move.l	(a7)+,a0
	move.l	d0,d3
	opt	om-
	movem.l	(a7)+,d0
	opt	om+
	jsr	_rand
	move.l	d0,-(a7)
	move.l	a0,-(a7)
	move.l	a1,-(a7)
	move.l	#256,-(a7)
	move.l	d0,-(a7)
	public	__ldivs
	jsr	__ldivs
	addq.w	#8,a7
	move.l	d1,d0
	move.l	(a7)+,a1
	move.l	(a7)+,a0
	move.l	d0,d2
	opt	om-
	movem.l	(a7)+,d0
	opt	om+
	jsr	_rand
	move.l	d0,-(a7)
	move.l	a0,-(a7)
	move.l	a1,-(a7)
	move.l	#256,-(a7)
	move.l	d0,-(a7)
	public	__ldivs
	jsr	__ldivs
	addq.w	#8,a7
	move.l	d1,d0
	move.l	(a7)+,a1
	move.l	(a7)+,a0
	move.l	d0,d1
	opt	om-
	movem.l	(a7)+,d0
	opt	om+
	moveq	#0,d0
	move.w	d4,d0
	jsr	_SetColor
	addq.w	#1,d4
	cmp.w	d4,d5
	bcc	l303
	moveq	#0,d1
	move.w	_resx,d1
	moveq	#0,d0
	move.w	_resy,d0
	move.l	d2,-(a7)
	move.l	d1,d7
	move.l	d0,d2
	swap	d7
	swap	d2
	mulu.w	d0,d7
	mulu.w	d1,d2
	mulu.w	d0,d1
	add.w	d2,d7
	swap	d7
	clr.w	d7
	add.l	d7,d1
	move.l	(a7)+,d2
	move.l	d1,d0
	move.l	d0,_DataSize
	move.l	d0,_DoneSize
	lsl.l	#4,d1
	move.l	d1,_QueueSize
	move.l	_SysBase,a6
	move.l	#65537,d1
	jsr	-198(a6)
	move.l	d0,_Data
	move.l	_DoneSize,d0
	move.l	_SysBase,a6
	move.l	#65537,d1
	jsr	-198(a6)
	move.l	d0,_Done
	move.l	_QueueSize,d0
	move.l	_SysBase,a6
	move.l	#65537,d1
	jsr	-198(a6)
	move.l	d0,_Queue
	tst.l	_Data
	beq	l231
	tst.l	_Done
	beq	l231
	tst.l	_Queue
	bne	l232
l231
	move.l	#0,a0
	bra	l235
l232
	move.l	#1,a0
l235
	move.l	a0,d7
	bne	l105
	moveq	#1,d0
	bra	l96
l105
	jsr	_SetStart
	move.w	#0,_y
	move.w	_y,d7
	cmp.w	_resy,d7
	bcc	l314
l309
	moveq	#0,d0
	move.w	_y,d0
	moveq	#0,d1
	move.w	_resx,d1
	move.l	d1,d4
	move.l	d2,-(a7)
	move.l	d4,d7
	move.l	d0,d2
	swap	d7
	swap	d2
	mulu.w	d0,d7
	mulu.w	d4,d2
	mulu.w	d0,d4
	add.w	d2,d7
	swap	d7
	clr.w	d7
	add.l	d7,d4
	move.l	(a7)+,d2
	move.l	_Done,a3
	add.l	d4,a3
	moveq	#0,d0
	move.b	(a3),d0
	and.l	#2,d0
	bne	l241
	or.b	#2,(a3)
	move.l	_QueueHead,d0
	moveq	#1,d7
	add.l	d0,d7
	move.l	d7,_QueueHead
	lsl.l	#2,d0
	move.l	_Queue,a0
	move.l	d4,(0,a0,d0.l)
	move.l	_QueueHead,d0
	cmp.l	_QueueSize,d0
	bne	l241
	move.l	#0,_QueueHead
l241
	moveq	#0,d0
	move.w	_y,d0
	moveq	#0,d1
	move.w	_resx,d1
	move.l	d2,-(a7)
	move.l	d0,d7
	move.l	d1,d2
	swap	d7
	swap	d2
	mulu.w	d1,d7
	mulu.w	d0,d2
	mulu.w	d1,d0
	add.w	d2,d7
	swap	d7
	clr.w	d7
	add.l	d7,d0
	move.l	(a7)+,d2
	subq.l	#1,d1
	move.l	d1,d5
	add.l	d0,d5
	move.l	_Done,a2
	add.l	d5,a2
	moveq	#0,d0
	move.b	(a2),d0
	and.l	#2,d0
	bne	l247
	or.b	#2,(a2)
	move.l	_QueueHead,d0
	moveq	#1,d7
	add.l	d0,d7
	move.l	d7,_QueueHead
	lsl.l	#2,d0
	move.l	_Queue,a0
	move.l	d5,(0,a0,d0.l)
	move.l	_QueueHead,d0
	cmp.l	_QueueSize,d0
	bne	l247
	move.l	#0,_QueueHead
l247
	moveq	#1,d0
	add.w	_y,d0
	move.w	d0,_y
	cmp.w	_resy,d0
	bcs	l309
l314
	move.w	#1,_x
	moveq	#0,d0
	move.w	_x,d0
	move.l	d0,a0
	moveq	#0,d0
	move.w	_resx,d0
	subq.l	#1,d0
	cmp.l	a0,d0
	ble	l315
l310
	moveq	#0,d4
	move.w	_x,d4
	move.l	_Done,a3
	add.l	d4,a3
	moveq	#0,d0
	move.b	(a3),d0
	and.l	#2,d0
	bne	l253
	or.b	#2,(a3)
	move.l	_QueueHead,d0
	moveq	#1,d7
	add.l	d0,d7
	move.l	d7,_QueueHead
	lsl.l	#2,d0
	move.l	_Queue,a0
	move.l	d4,(0,a0,d0.l)
	move.l	_QueueHead,d0
	cmp.l	_QueueSize,d0
	bne	l253
	move.l	#0,_QueueHead
l253
	moveq	#0,d0
	move.w	_resy,d0
	subq.l	#1,d0
	moveq	#0,d1
	move.w	_resx,d1
	move.l	d2,-(a7)
	move.l	d0,d7
	move.l	d1,d2
	swap	d7
	swap	d2
	mulu.w	d1,d7
	mulu.w	d0,d2
	mulu.w	d1,d0
	add.w	d2,d7
	swap	d7
	clr.w	d7
	add.l	d7,d0
	move.l	(a7)+,d2
	moveq	#0,d1
	move.w	_x,d1
	move.l	d1,d5
	add.l	d0,d5
	move.l	_Done,a2
	add.l	d5,a2
	moveq	#0,d0
	move.b	(a2),d0
	and.l	#2,d0
	bne	l259
	or.b	#2,(a2)
	move.l	_QueueHead,d0
	moveq	#1,d7
	add.l	d0,d7
	move.l	d7,_QueueHead
	lsl.l	#2,d0
	move.l	_Queue,a0
	move.l	d5,(0,a0,d0.l)
	move.l	_QueueHead,d0
	cmp.l	_QueueSize,d0
	bne	l259
	move.l	#0,_QueueHead
l259
	moveq	#1,d0
	add.w	_x,d0
	move.w	d0,_x
	moveq	#0,d7
	move.w	d0,d7
	move.l	d7,a0
	moveq	#0,d0
	move.w	_resx,d0
	subq.l	#1,d0
	cmp.l	a0,d0
	bgt	l310
l315
	move.w	#0,_flag
	move.l	_QueueTail,d5
	move.l	_QueueHead,(0+l357,a7)
	cmp.l	(0+l357,a7),d5
	beq	l316
	move.l	(0+l357,a7),d4
l306
	cmp.l	d4,d5
	bcc	l117
	moveq	#1,d0
	add.w	_flag,d0
	move.w	d0,_flag
	and.l	#65535,d0
	and.l	#3,d0
	beq	l118
l117
	moveq	#1,d0
	add.l	d5,d0
	move.l	d0,_QueueTail
	move.l	d5,d1
	lsl.l	#2,d1
	move.l	_Queue,a0
	move.l	(0,a0,d1.l),_p
	cmp.l	_QueueSize,d0
	bne	l122
	move.l	#0,_QueueTail
	bra	l122
l118
	move.l	d4,d0
	subq.l	#1,d0
	move.l	d0,_QueueHead
	lsl.l	#2,d0
	move.l	_Queue,a0
	move.l	(0,a0,d0.l),_p
l122
	move.l	_p,a0
	move.l	a0,-(a7)
	jsr	_Scan
	move.l	_QueueTail,d5
	move.l	_QueueHead,d4
	addq.w	#4,a7
	cmp.l	d5,d4
	bne	l306
l316
	move.l	#0,_p
	moveq	#0,d0
	move.w	_resx,d0
	moveq	#0,d1
	move.w	_resy,d1
	move.l	d2,-(a7)
	move.l	d0,d7
	move.l	d1,d2
	swap	d7
	swap	d2
	mulu.w	d1,d7
	mulu.w	d0,d2
	mulu.w	d1,d0
	add.w	d2,d7
	swap	d7
	clr.w	d7
	add.l	d7,d0
	move.l	(a7)+,d2
	subq.l	#1,d0
	move.l	d0,a0
	cmp.l	_p,a0
	bls	l317
l312
	move.l	_Done,a2
	move.l	_p,d4
	lea	(a2,d4.l),a0
	moveq	#0,d0
	move.b	(a0),d0
	and.l	#1,d0
	beq	l130
	moveq	#0,d0
	move.b	(1,a2,d4.l),d0
	and.l	#1,d0
	bne	l130
	move.l	_Data,a0
	lea	(a0,d4.l),a1
	move.b	(a1),(1,a0,d4.l)
	move.l	_Data,a1
	move.l	_p,d0
	add.l	d0,a1
	move.l	_newbuffer,a0
	move.b	(a1),(1,a0,d0.l)
	moveq	#1,d0
	add.l	_p,d0
	move.l	_Done,a0
	add.l	d0,a0
	or.b	#1,(a0)
l130
	moveq	#1,d0
	add.l	_p,d0
	move.l	d0,_p
	moveq	#0,d1
	move.w	_resx,d1
	moveq	#0,d4
	move.w	_resy,d4
	move.l	d1,d6
	move.l	d4,d7
	swap	d6
	swap	d7
	mulu.w	d4,d6
	mulu.w	d1,d7
	mulu.w	d4,d1
	add.w	d7,d6
	swap	d6
	clr.w	d6
	add.l	d6,d1
	subq.l	#1,d1
	move.l	d1,a0
	cmp.l	d0,a0
	bhi	l312
l317
	jsr	_SetStop
	tst.l	_Queue
	beq	l263
	move.l	_QueueSize,d0
	move.l	_Queue,a1
	move.l	_SysBase,a6
	jsr	-210(a6)
l263
	tst.l	_Done
	beq	l265
	move.l	_DoneSize,d0
	move.l	_Done,a1
	move.l	_SysBase,a6
	jsr	-210(a6)
l265
	tst.l	_Data
	beq	l267
	move.l	_DataSize,d0
	move.l	_Data,a1
	move.l	_SysBase,a6
	jsr	-210(a6)
l267
	jsr	_WaitMouse
	jsr	_MouseOn
	jsr	_MultiTaskOn
	jsr	_RestoreMode
	moveq	#0,d7
	move.b	14676989,d7
	fmove.l	d7,fp0
	fmul.d	#$401c600a7c5ac472,fp0
	fmul.d	#$412e848000000000,fp0
	fcmp.d	#$41e0000000000000,fp0
	fbge	l358
	fintrz	fp0
	fmove.l	fp0,d7
	bra	l359
l358:
	fsub.d	#$41e0000000000000,fp0
	fintrz	fp0
	fmove.l	fp0,d7
	bchg	#31,d7
l359:
	move.l	d7,(0+l357,a7)
	jsr	_GetStart
	move.l	d0,(4+l357,a7)
	jsr	_GetStop
	move.l	d0,(8+l357,a7)
	move.l	(8+l357,a7),d7
	cmp.l	(4+l357,a7),d7
	bls	l271
	move.l	(8+l357,a7),d7
	sub.l	(4+l357,a7),d7
	move.l	d7,(12+l357,a7)
	bra	l272
l271
	move.l	(4+l357,a7),d0
	sub.l	(8+l357,a7),d0
	move.l	#4294967295,d7
	sub.l	d0,d7
	move.l	d7,(12+l357,a7)
l272
	fmove.l	(12+l357,a7),fp0
	tst.l	(12+l357,a7)
	bge.s	l360
	fadd.d	#4294967296,fp0
l360:
	fmove.l	(0+l357,a7),fp1
	tst.l	(0+l357,a7)
	bge.s	l361
	fadd.d	#4294967296,fp1
l361:
	fmove.x	fp1,fp2
	fmove.x	fp0,fp1
	fdiv.x	fp2,fp1
	fmove.x	fp1,fp0
	fcmp.d	#$41e0000000000000,fp0
	fbge	l362
	fintrz	fp0
	fmove.l	fp0,d0
	bra	l363
l362:
	fsub.d	#$41e0000000000000,fp0
	fintrz	fp0
	fmove.l	fp0,d0
	bchg	#31,d0
l363:
	fmove.l	d0,fp0
	tst.l	d0
	bge.s	l364
	fadd.d	#4294967296,fp0
l364:
	fneg.x	fp0
	fadd.x	fp1,fp0
	fmul.d	#$40c3880000000000,fp0
	fcmp.d	#$41e0000000000000,fp0
	fbge	l365
	fintrz	fp0
	fmove.l	fp0,d1
	bra	l366
l365:
	fsub.d	#$41e0000000000000,fp0
	fintrz	fp0
	fmove.l	fp0,d1
	bchg	#31,d1
l366:
	move.l	d1,-(a7)
	move.l	d0,-(a7)
	moveq	#0,d0
	move.b	14676989,d0
	move.l	d0,-(a7)
	pea	l131
	jsr	_printf
	moveq	#0,d0
	add.w	#16,a7
l96
l355	reg	a2/a3/a4/a5/a6/d2/d3/d4/d5/d6/d7
	movem.l	(a7)+,a2/a3/a4/a5/a6/d2/d3/d4/d5/d6/d7
l356	freg	fp2
	fmovem.x	(a7)+,l356
l357	equ	56
	add.w	#16,a7
	rts
	public	_SAGAMODEW
	section	"DATA",data
	cnop	0,4
_SAGAMODEW
	dc.l	14676468
	public	_SAGAMODER
	cnop	0,4
_SAGAMODER
	dc.l	14672372
	public	_SAGAPTRW
	cnop	0,4
_SAGAPTRW
	dc.l	14676460
	public	_SAGAPTRR
	cnop	0,4
_SAGAPTRR
	dc.l	14672364
	public	_SAGACOLORW
	cnop	0,4
_SAGACOLORW
	dc.l	14676872
	public	_CIAAPRA
	cnop	0,4
_CIAAPRA
	dc.l	12574721
	public	_QueueHead
	cnop	0,4
_QueueHead
	dc.l	0
	public	_QueueTail
	cnop	0,4
_QueueTail
	dc.l	0
	public	_printf
	public	_rand
	public	_SysBase
	public	_oldmode
	section	"BSS",bss
	cnop	0,4
_oldmode
	ds.b	2
	public	_oldbuffer
	cnop	0,4
_oldbuffer
	ds.b	4
	public	_newmode
	cnop	0,4
_newmode
	ds.b	2
	public	_rawbuffer
	cnop	0,4
_rawbuffer
	ds.b	4
	public	_newbuffer
	cnop	0,4
_newbuffer
	ds.b	4
	public	_memsize
	cnop	0,4
_memsize
	ds.b	4
	public	_x
	cnop	0,4
_x
	ds.b	2
	public	_y
	cnop	0,4
_y
	ds.b	2
	public	_i
	cnop	0,4
_i
	ds.b	2
	public	_MaxIter
	cnop	0,4
_MaxIter
	ds.b	2
	public	_resx
	cnop	0,4
_resx
	ds.b	2
	public	_resy
	cnop	0,4
_resy
	ds.b	2
	public	_xn
	cnop	0,4
_xn
	ds.b	8
	public	_yn
	cnop	0,4
_yn
	ds.b	8
	public	_xn1
	cnop	0,4
_xn1
	ds.b	8
	public	_yn1
	cnop	0,4
_yn1
	ds.b	8
	public	_cx
	cnop	0,4
_cx
	ds.b	8
	public	_cy
	cnop	0,4
_cy
	ds.b	8
	public	_d
	cnop	0,4
_d
	ds.b	8
	public	_stepr
	cnop	0,4
_stepr
	ds.b	8
	public	_stepi
	cnop	0,4
_stepi
	ds.b	8
	public	_maxr
	cnop	0,4
_maxr
	ds.b	8
	public	_minr
	cnop	0,4
_minr
	ds.b	8
	public	_maxi
	cnop	0,4
_maxi
	ds.b	8
	public	_mini
	cnop	0,4
_mini
	ds.b	8
	public	_Data
	cnop	0,4
_Data
	ds.b	4
	public	_Done
	cnop	0,4
_Done
	ds.b	4
	public	_Queue
	cnop	0,4
_Queue
	ds.b	4
	public	_DataSize
	cnop	0,4
_DataSize
	ds.b	4
	public	_DoneSize
	cnop	0,4
_DoneSize
	ds.b	4
	public	_QueueSize
	cnop	0,4
_QueueSize
	ds.b	4
	public	_p
	cnop	0,4
_p
	ds.b	4
	public	_flag
	cnop	0,4
_flag
	ds.b	2
	public	_IterP1
	cnop	0,4
_IterP1
	ds.b	2
	public	_IterP2
	cnop	0,4
_IterP2
	ds.b	2
	public	_IterP3
	cnop	0,4
_IterP3
	ds.b	2
	public	_IterP4
	cnop	0,4
_IterP4
	ds.b	2
	public	_Set8BitMode
	public	_RestoreMode
	public	_SetColor
	public	_Put8BitPixel
	public	_WaitMouse
	public	_SetStart
	public	_SetStop
	public	_GetStart
	public	_GetStop
	public	_MultiTaskOff
	public	_MultiTaskOn
	public	_MouseOff
	public	_MouseOn
	public	_SingleIterateAsm
	section	"CODE",code
	cnop	0,4
l131
	dc.b	69
	dc.b	120
	dc.b	101
	dc.b	99
	dc.b	117
	dc.b	116
	dc.b	105
	dc.b	111
	dc.b	110
	dc.b	32
	dc.b	116
	dc.b	105
	dc.b	109
	dc.b	101
	dc.b	32
	dc.b	40
	dc.b	37
	dc.b	100
	dc.b	120
	dc.b	32
	dc.b	99
	dc.b	111
	dc.b	114
	dc.b	101
	dc.b	41
	dc.b	58
	dc.b	32
	dc.b	37
	dc.b	117
	dc.b	46
	dc.b	37
	dc.b	48
	dc.b	52
	dc.b	117
	dc.b	32
	dc.b	115
	dc.b	101
	dc.b	99
	dc.b	111
	dc.b	110
	dc.b	100
	dc.b	115
	dc.b	10
	dc.b	0
