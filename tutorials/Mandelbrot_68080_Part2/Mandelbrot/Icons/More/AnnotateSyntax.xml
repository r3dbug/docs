<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE Ann-SyntaxHighlighting>
<!-- There are 5 special characters that need to be coded:    -->
<!-- & - &amp;   < - &lt;   > - &gt;   " - &quot;   ' - &apos; -->
<Ann-SyntaxHighlighting>

   <!-- Add your own syntax files here: -->
   <!-- <SyntaxFile filename="my_syntax.xml"/> -->

  <Syntax>
    <Name>Amiga Guide</Name>
    <Qualifying>
      <OrTokens min="15">@{ }</OrTokens>
      <OrTokens min="1" mandatory="1" caseinsensitive="1">@database</OrTokens>
      <OrTokens min="10">@node @endnode @NODE @ENDNODE @Node @Endnode</OrTokens>
      <FilePattern>#?.guide</FilePattern>
    </Qualifying>
    <Tokens>15</Tokens>
    <Token style="bold">@{b}</Token>
    <Token style="bold">@{ub}</Token>
    <Token style="underline">@{u}</Token>
    <Token style="underline">@{uu}</Token>
    <Token style="italic">@{i}</Token>
    <Token style="italic">@{ui}</Token>
    <Token pen="253">@VER:</Token>
    <Token pen="253">@(c)</Token>
    <ComplexToken>
      <Token pen="3"><![CDATA[" ]]></Token>
      <MatchToToken>}</MatchToToken>
    </ComplexToken>
    <ComplexToken>
      <Token pen="4">&quot;</Token>
      <MatchToToken>&quot;</MatchToToken>
      <MatchToEOL/>
    </ComplexToken>
    <ComplexToken>
      <Token pen="3">@{</Token>
      <MatchToToken>}</MatchToToken>
    </ComplexToken>
    <ComplexToken>
      <Token pen="3">@{</Token>
      <MatchToToken>&quot;</MatchToToken>
    </ComplexToken>
    <ComplexToken type="alpha"> <!--Part of an e-mail should not be coloured-->
      <Token>@</Token>
      <MatchToToken>.</MatchToToken>
    </ComplexToken>
    <ComplexToken type="alpha">
      <Token pen="254">@</Token>
    </ComplexToken>
  </Syntax>

  <Syntax>
    <Name>XML</Name>
    <Qualifying>
      <OrTokens min="15"><![CDATA[/> </ >]]></OrTokens>
      <AndTokens><![CDATA[<?xml </ >]]></AndTokens>
      <FilePattern>#?.(xml|sgml)</FilePattern>
    </Qualifying>
    <Tokens>10</Tokens>
    <ComplexToken>
      <Token pen="4">&quot;</Token>
      <MatchToToken>&quot;</MatchToToken>
      <MatchToEOL/>
    </ComplexToken>
    <ComplexToken>
      <Token pen="12"><![CDATA[<!--]]></Token>
      <MatchToToken>--></MatchToToken>
    </ComplexToken>
    <ComplexToken>
      <Token pen="3"><![CDATA[<![]]></Token>
      <MatchToToken>]></MatchToToken>
    </ComplexToken>
    <ComplexToken>
      <Token pen="3"><![CDATA[<!]]></Token>
      <MatchToToken>></MatchToToken>
    </ComplexToken>
    <ComplexToken>
      <Token pen="3"><![CDATA[<?]]></Token>
      <MatchToToken>></MatchToToken>
    </ComplexToken>
    <ComplexToken>
      <Token pen="2">&amp;</Token>
      <MatchToToken>;</MatchToToken>
    </ComplexToken>
    <Token pen="254" style="bold"><![CDATA[</]]></Token>
    <Token pen="254" style="bold">/></Token>
    <Token pen="254" style="bold">&lt;</Token>
    <Token pen="254" style="bold">&gt;</Token>
  </Syntax>

  <Syntax>
    <Name>Amiga-E</Name>
    <Qualifying>
      <OrTokens min="10">ENDIF FOR WHILE DEF PROC CONST</OrTokens>
      <AndTokens>( ) , DEF</AndTokens>
      <FilePattern>#?.e</FilePattern>
    </Qualifying>
    <Tokens>110</Tokens>
    <!--Keywords-->
    <Token style="bold">AND</Token>
    <Token style="bold">ASM</Token>
    <Token style="bold">ARRAY</Token>
    <Token style="bold">BUT</Token>
    <Token style="bold">CASE</Token>
    <Token style="bold">CHAR</Token>
    <Token style="bold">CONST</Token>
    <Token style="bold">DEC</Token>
    <Token style="bold">DEFAULT</Token>
    <Token style="bold">DEF</Token>
    <Token style="bold">DO</Token>
    <Token style="bold">ELSEIF</Token>
    <Token style="bold">ELSE</Token>
    <Token style="bold">EMPTY</Token>
    <Token style="bold">END</Token>
    <Token style="bold">ENUM</Token>
    <Token style="bold">EXCEPT</Token>
    <Token style="bold">EXIT</Token>
    <Token style="bold">EXPORT</Token>
    <Token style="bold">FOR</Token>
    <Token style="bold">HANDLE</Token>
    <Token style="bold">IF</Token>
    <Token style="bold">INCBIN</Token>
    <Token style="bold">INC</Token>
    <Token style="bold">INT</Token>
    <Token style="bold">IS</Token>
    <Token style="bold">JUMP</Token>
    <Token style="bold">LARGE</Token>
    <Token style="bold">LIST</Token>
    <Token style="bold">LONG</Token>
    <Token style="bold">LOOP</Token>
    <Token style="bold">MODULE</Token>
    <Token style="bold">OBJECT</Token>
    <Token style="bold">OF</Token>
    <Token style="bold">OPT</Token>
    <Token style="bold">OR</Token>
    <Token style="bold">OSVERSION</Token>
    <Token style="bold">PROC</Token>
    <Token style="bold">PTR</Token>
    <Token style="bold">PREPROCESS</Token>
    <Token style="bold">PRIVATE</Token>
    <Token style="bold">PUBLIC</Token>
    <Token style="bold">RAISE</Token>
    <Token style="bold">REG</Token>
    <Token style="bold">REPEAT</Token>
    <Token style="bold">RETURN</Token>
    <Token style="bold">SELECT</Token>
    <Token style="bold">SET</Token>
    <Token style="bold">SIZEOF</Token>
    <Token style="bold">STACK</Token>
    <Token style="bold">STEP</Token>
    <Token style="bold">STRING</Token>
    <Token style="bold">SUPER</Token>
    <Token style="bold">THEN</Token>
    <Token style="bold">TO</Token>
    <Token style="bold">UNTIL</Token>
    <Token style="bold">VOID</Token>
    <Token style="bold">WHILE</Token>
    <!--Consts-->
    <Token pen="14">ALL</Token>
    <Token pen="14">FALSE</Token>
    <Token pen="14">GADGETSIZE</Token>
    <Token pen="14">NEWFILE</Token>
    <Token pen="14">NIL</Token>
    <Token pen="14">OLDFILE</Token>
    <Token pen="14">TRUE</Token>
    <Token style="bold">NEW</Token> <!--must be after NEWFILE-->
    <ComplexToken type="alphaupper"> <!--Handles all ENDFOR, ENDIF etc.-->
      <Token style="bold">END</Token>
    </ComplexToken>
    <Token>()</Token>
    <Token pen="2">:=</Token>
    <Token pen="2">++</Token>
    <Token pen="2">--</Token>
    <Token style="bold" absolute="true">(</Token>
    <Token style="bold" absolute="true">)</Token>
    <Token style="bold">:</Token>
    <Token style="bold">,</Token>
    <Token pen="2" bgpen="4">==</Token>
    <Token pen="2" bgpen="4">!=</Token>
    <!--String and char-const tokens:-->
    <ComplexToken>
      <Token pen="13">&quot;</Token>
      <MatchToToken>&quot;</MatchToToken>
      <MatchToEOL/>
    </ComplexToken>
    <ComplexToken>
      <Token pen="4">&apos;</Token>
      <MatchToToken>&apos;</MatchToToken>
      <MatchToEOL/>
    </ComplexToken>
    <!--Comments...-->
    <ComplexToken>
      <Token pen="12" style="italic">-></Token>
      <MatchToEOL/>
    </ComplexToken>
    <ComplexToken>
      <Token pen="12" absolute="true">/*</Token>
      <MatchToToken>*/</MatchToToken>
      <MultiLine/>
    </ComplexToken>
    <Token pen="12">*/</Token>
    <!--Preprocessing directives...-->
    <ComplexToken type="alphalower">
      <Token pen="253">#</Token>
    </ComplexToken>
  </Syntax>

  <Syntax>
    <Name>PortablE</Name>
    <Qualifying>
      <OrTokens min="10">ENDIF FOR WHILE DEF PROC CONST</OrTokens>
      <OrTokens min="5" mandatory="1">FINALLY POINTER VALUE BOOL CLASS SHL SHR NATIVE ENDNATIVE !!ARRAY !!PTR</OrTokens>
      <AndTokens>( ) , DEF</AndTokens>
      <FilePattern>#?.e</FilePattern>
    </Qualifying>
    <Tokens>110</Tokens>
    <!--Keywords-->
    <Token style="bold">AND</Token>
    <Token style="bold">ARRAY</Token>
    <Token style="bold">BIGVALUE</Token>
    <Token style="bold">BOOL</Token>
    <Token style="bold">BUT</Token>
    <Token style="bold">BYTE</Token>
    <Token style="bold">CALLBACK</Token>
    <Token style="bold">CASE</Token>
    <Token style="bold">CHAR</Token>
    <Token style="bold">CLASS</Token>
    <Token style="bold">CLASSTYPE</Token>
    <Token style="bold">CONST</Token>
    <Token style="bold">DEFAULT</Token>
    <Token style="bold">DEF</Token>
    <Token style="bold">DO</Token>
    <Token style="bold">ELSE</Token>
    <Token style="bold">ELSEIF</Token>
    <Token style="bold">EMPTY</Token>
    <Token style="bold">END</Token>
    <Token style="bold">ENUM</Token>
    <Token style="bold">EXPORT</Token>
    <Token style="bold">FINALLY</Token>
    <Token style="bold">FLOAT</Token>
    <Token style="bold">FOR</Token>
    <Token style="bold">FUNC</Token>
    <Token style="bold">IF</Token>
    <Token style="bold">ILIST</Token>
    <Token style="bold">INLINE</Token>
    <Token style="bold">INT</Token>
    <Token style="bold">IMPLEMENTS</Token>
    <Token style="bold">IS</Token>
    <Token style="bold">LARGE</Token>
    <Token style="bold">LIST</Token>
    <Token style="bold">LONG</Token>
    <Token style="bold">LOOP</Token>
    <Token style="bold">MODULE</Token>
    <Token style="bold">NATIVE</Token>
    <Token style="bold">NOPTRTOCHAR</Token>
    <Token style="bold">NOT</Token>
    <Token style="bold">OBJECT</Token>
    <Token style="bold">OF</Token>
    <Token style="bold">OPT</Token>
    <Token style="bold">OPTIMISE</Token>
    <Token style="bold">OR</Token>
    <Token style="bold">ORPHAN</Token>
    <Token style="bold">OSVERSION</Token>
    <Token style="bold">PROC</Token>
    <Token style="bold">PTR</Token>
    <Token style="bold">PREPROCESS</Token>
    <Token style="bold">POINTER</Token>
    <Token style="bold">PRIVATE</Token>
    <Token style="bold">PROTECTED</Token>
    <Token style="bold">PROTOTYPE</Token>
    <Token style="bold">PUBLIC</Token>
    <Token style="bold">QUAD</Token>
    <Token style="bold">RAISE</Token>
    <Token style="bold">REPEAT</Token>
    <Token style="bold">REPLACEMENT</Token>
    <Token style="bold">RETURN</Token>
    <Token style="bold">RETURNS</Token>
    <Token style="bold">SELECT</Token>
    <Token style="bold">SET</Token>
    <Token style="bold">SHL</Token>
    <Token style="bold">SHR</Token>
    <Token style="bold">SIZEOF</Token>
    <Token style="bold">STATIC</Token>
    <Token style="bold">STEP</Token>
    <Token style="bold">STRING</Token>
    <Token style="bold">SUPER</Token>
    <Token style="bold">THEN</Token>
    <Token style="bold">MULTITHREADED</Token>
    <Token style="bold">TO</Token>
    <Token style="bold">TYPEOF</Token>
    <Token style="bold">UNGENERIC</Token>
    <Token style="bold">UNTIL</Token>
    <Token style="bold">VALUE</Token>
    <Token style="bold">VOID</Token>
    <Token style="bold">WHILE</Token>
    <Token style="bold">XOR</Token>
    <!--Consts-->
    <Token pen="14">ALL</Token>
    <Token pen="14">FALSE</Token>
    <Token pen="14">NIL</Token>
    <Token pen="14">NILA</Token>
    <Token pen="14">NILS</Token>
    <Token pen="14">TRUE</Token>
    <Token style="bold">NEW</Token> <!--must be after NEWFILE-->
    <ComplexToken type="alphaupper"> <!--Handles all ENDFOR, ENDIF etc.-->
      <Token style="bold">END</Token>
    </ComplexToken>
    <Token>()</Token>
    <Token pen="2">:=</Token>
    <Token pen="2">++</Token>
    <Token pen="2">--</Token>
    <Token pen="2" bgpen="0" style="bold">!!</Token>
    <Token style="bold" absolute="true">(</Token>
    <Token style="bold" absolute="true">)</Token>
<!--
    <Token style="bold">:</Token>
-->

    <Token style="bold">,</Token>
    <Token pen="2" bgpen="4">==</Token>
    <Token pen="2" bgpen="4">!=</Token>
    <!--String and char-const tokens:-->
    <ComplexToken>
      <Token pen="13">&quot;</Token>
      <MatchToToken>&quot;</MatchToToken>
      <MatchToEOL/>
    </ComplexToken>
    <ComplexToken>
      <Token pen="4">&apos;</Token>
      <MatchToToken>&apos;</MatchToToken>
      <MatchToEOL/>
    </ComplexToken>
    <ComplexToken>
      <Token pen="253">{</Token>
      <MatchToToken>}</MatchToToken>
      <MultiLine/>
    </ComplexToken>
    <!--Comments...-->
    <ComplexToken>
      <Token pen="12" style="italic">-></Token>
      <MatchToEOL/>
    </ComplexToken>
    <ComplexToken>
      <Token pen="12" absolute="true">/*</Token>
      <MatchToToken>*/</MatchToToken>
      <MultiLine/>
    </ComplexToken>
    <Token pen="12">*/</Token>
    <!--Preprocessing directives...-->
    <ComplexToken type="alphalower">
      <Token pen="253">#</Token>
    </ComplexToken>
  </Syntax>

  <Syntax>
    <Name>HTML</Name>
    <Qualifying>
      <OrTokens min="12"><![CDATA[/> </ >]]></OrTokens>
      <AndTokens caseinsensitive="1"><![CDATA[<html> <body]]></AndTokens>
      <FilePattern>#?.(html|htm)</FilePattern>
    </Qualifying>
    <Tokens>100</Tokens>
    <ComplexToken>
      <Token pen="4">&quot;</Token>
      <MatchToToken>&quot;</MatchToToken>
      <MatchToEOL/>
    </ComplexToken>
    <ComplexToken>
      <Token pen="12"><![CDATA[<!--]]></Token>
      <MatchToToken>--></MatchToToken>
      <MultiLine/>
    </ComplexToken>
    <ComplexToken>
      <Token pen="3"><![CDATA[<!]]></Token>
      <MatchToToken>></MatchToToken>
    </ComplexToken>
    <ComplexToken>
      <Token pen="3"><![CDATA[<?]]></Token>
      <MatchToToken>></MatchToToken>
    </ComplexToken>
    <ComplexToken>
      <Token pen="2">&amp;</Token>
      <MatchToToken>;</MatchToToken>
    </ComplexToken>
    <Token pen="14" style="bold" caseinsensitive="1"><![CDATA[<br>]]></Token>

    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<h1>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<h2>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<h3>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<h4>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<h5>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<h6>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<p>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<html>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<body>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<title>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<b>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<big>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<em>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<i>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<small>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<strong>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<sub>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<sup>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<ins>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<del>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<s>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<strike>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<u>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<code>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<kbd>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<samp>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<tt>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<var>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<pre>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<abbr>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<acronym>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<address>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<bdo>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<q>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<cite>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<dfn>]]></Token>

    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</h1>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</h2>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</h3>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</h4>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</h5>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</h6>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</p>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</html>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</body>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</title>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</b>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</big>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</em>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</i>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</small>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</strong>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</sub>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</sup>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</ins>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</del>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</s>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</strike>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</u>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</code>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</kbd>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</samp>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</tt>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</var>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</pre>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</abbr>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</acronym>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</address>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</bdo>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</q>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</cite>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</dfn>]]></Token>
    <ComplexToken type="alpha">
      <Token style="bold" pen="14"><![CDATA[</]]></Token>
      <MatchToToken>&gt;</MatchToToken>
    </ComplexToken>
    <ComplexToken type="alpha">
      <Token style="bold" pen="14">&lt;</Token>
    </ComplexToken>
    <Token pen="14" style="bold">/></Token>
    <Token pen="14" style="bold">&gt;</Token>
    <Token pen="254" style="bold"><![CDATA[</]]></Token>
    <Token pen="254" style="bold">&lt;</Token>
  </Syntax>


  <Syntax>
    <Name>My C/C++</Name>
    <!--Rules for how to determine if a text is in this language:-->
    <Qualifying>
      <OrTokens min="12">while int void #include #define struct</OrTokens>
      <AndTokens>{ } ( ) , ; *</AndTokens>
      <FilePattern>#?.(c|cpp|h|hpp)</FilePattern>
    </Qualifying>
    <!--Make sure tokens is large enough to hold all tokens incl special tokens.-->
    <Tokens>150</Tokens>
    <Token style="bold" pen="254">char</Token>
    <Token style="bold" pen="254">int</Token>
    <Token style="bold" pen="254">short</Token>
    <Token style="bold" pen="254">long</Token>
    <Token style="bold" pen="254">signed</Token>
    <Token style="bold" pen="254">unsigned</Token>
    <Token style="bold" pen="254">void</Token>
    <Token style="bold" pen="254">float</Token>
    <Token style="bold" pen="254">double</Token>
    <Token style="bold" pen="254">bool</Token>
    <Token pen="254">UWORD</Token>
    <Token pen="254">ULONG</Token>
    <Token pen="254">UBYTE</Token>
    <Token pen="254">BYTE</Token>
    <Token pen="254">WORD</Token>
    <Token pen="254">LONG</Token>
    <Token pen="254">APTR</Token>
    <Token pen="254">IPTR</Token>
    <Token pen="36">__asm</Token>
    <Token pen="36">__inline</Token>
    <Token pen="36">register</Token>
    <Token style="bold">if</Token>
    <Token style="bold">for</Token>
    <Token style="bold">while</Token>
    <Token style="bold">do</Token>
    <Token style="bold">else</Token>
    <Token style="bold">switch</Token>
    <Token style="bold">case</Token>
    <Token style="bold">break</Token>
    <Token style="bold">continue</Token>
    <Token style="bold">default</Token>
    <Token style="bold">return</Token>
    <Token style="bold">struct</Token>
    <Token style="bold">sizeof</Token>
    <Token style="bold">try</Token>
    <Token style="bold">throw</Token>
    <Token style="bold">catch</Token>
    <Token style="bold">namespace</Token>
    <Token style="bold">operator</Token>
    <Token style="bold">using</Token>
    <Token style="bold">new</Token>
    <Token style="bold">delete</Token>
    <Token style="bold">typedef</Token>
    <Token style="bold">enum</Token>
    <Token style="bold">extern</Token>
    <Token style="bold">class</Token>
    <Token style="bold">private</Token>
    <Token style="bold">protected</Token>
    <Token style="bold">public</Token>
    <Token style="bold">static</Token>
    <Token style="bold">template</Token>
    <Token style="bold">inline</Token>
    <Token style="bold">const</Token>
    <Token style="bold">friend</Token>
    <Token style="bold">virtual</Token>
    <Token style="bold">volatile</Token>
    <Token style="bold">explicit</Token>
    <Token style="bold">true</Token>
    <Token style="bold">false</Token>
    <Token pen="2" bgpen="4">:=</Token>
    <Token style="bold">()</Token>
    <Token>==</Token>
    <Token>!=</Token>
    <Token><![CDATA[<=]]></Token>
    <Token>>=</Token>
    <Token style="bold" absolute="true">(</Token>
    <Token style="bold" absolute="true">)</Token>
    <Token style="bold">;</Token>
    <Token style="bold">,</Token>
    <Token style="bold" pen="253" absolute="true">{</Token>
    <Token style="bold" pen="253" absolute="true">}</Token>
<!--
    <Token pen="253">.</Token>
-->
    <Token pen="253">-></Token>
    <!--Variable altering operators:-->
    <Token style="bold">=</Token>
    <Token style="bold">+=</Token>
    <Token style="bold">-=</Token>
    <Token style="bold">*=</Token>
    <Token style="bold">/=</Token>
    <Token style="bold">|=</Token>
    <Token style="bold"><![CDATA[&=]]></Token>
    <Token style="bold"><![CDATA[<<=]]></Token>
    <Token style="bold"><![CDATA[>>=]]></Token>
    <Token style="bold">++</Token>
    <Token style="bold">--</Token>
    <Token style="bold"><![CDATA[<<]]></Token>
    <Token style="bold"><![CDATA[>>]]></Token>
    <Token style="bold"><![CDATA[&&]]></Token>
    <Token style="bold"><![CDATA[||]]></Token>
    <Token style="bold"><![CDATA[|]]></Token>
    <Token style="bold"><![CDATA[&]]></Token>
    
    
    <!--ASM stuff-->
    <Token pen="173">d0</Token>
    <Token pen="173">d1</Token>
    <Token pen="173">d2</Token>
    <Token pen="173">d3</Token>
    <Token pen="173">d4</Token>
    <Token pen="173">d5</Token>
    <Token pen="173">d6</Token>
    <Token pen="173">d7</Token>
    <Token pen="173">a0</Token>
    <Token pen="173">a1</Token>
    <Token pen="173">a2</Token>
    <Token pen="173">a3</Token>
    <Token pen="173">a4</Token>
    <Token pen="173">a5</Token>
    <Token pen="173">a6</Token>
    <Token pen="173">a7</Token>
    <Token pen="173">fp0</Token>
    <Token pen="173">fp1</Token>
    <Token pen="173">fp2</Token>
    <Token pen="173">fp3</Token>
    <Token pen="173">fp4</Token>
    <Token pen="173">fp5</Token>
    <Token pen="173">fp6</Token>
    <Token pen="173">fp7</Token>
    <Token pen="173">ASM</Token>
    <Token pen="173">REG</Token>

    <!--String and char-const tokens:-->
    <ComplexToken>
      <Token pen="166">&quot;</Token>
      <MatchToToken>&quot;</MatchToToken>
      <MatchToEOL/>
    </ComplexToken>
    <ComplexToken>
      <Token pen="47">&apos;</Token>
      <MatchToToken>&apos;</MatchToToken>
      <MatchToEOL/>
    </ComplexToken>
    <ComplexToken type="hexnumber">
      <Token pen="40">0x</Token>
    </ComplexToken>
    <ComplexToken type="decnumber">
      <Token pen="40"/>
    </ComplexToken>
    <!--Comments...-->
    <ComplexToken>
      <Token pen="166" style="italic">//</Token>
      <MatchToEOL/>
    </ComplexToken>
    <ComplexToken>
      <Token pen="166" absolute="true">/*</Token>
      <MatchToToken>*/</MatchToToken>
      <MultiLine/>
    </ComplexToken>
    <Token pen="2" bgpen="4">*/</Token>
    <!--Preprocessing directives...-->
    <ComplexToken type="alphalower">
      <Token style="bold" pen="37">#</Token>
    </ComplexToken>
<!--
    <ComplexToken type="alphalower">
      <Token style="bold" pen="37"><![CDATA[<]]></Token>
      <MatchToToken><![CDATA[>]]></MatchToToken>
    </ComplexToken>
-->
  </Syntax>



  <Syntax>
    <Name>My ASM</Name>
    <!--Rules for how to determine if a text is in this language:-->
    <Qualifying>
      <OrTokens min="12">XDEF move.l move.w move.b</OrTokens>
      <AndTokens></AndTokens>
      <FilePattern>#?.(s|asm|S|ASM|i|I)</FilePattern>
    </Qualifying>
    <!--Make sure tokens is large enough to hold all tokens incl special tokens.-->
    <Tokens>350</Tokens>
    
<!--
    <Token style="bold" pen="254">.b</Token>
    <Token style="bold" pen="254">.l</Token>
    <Token style="bold" pen="254">.d</Token>
    <Token style="bold" pen="254">.x</Token>
    <Token style="bold" pen="254">.s</Token>
    <Token style="bold" pen="254">.w</Token>
-->
    <Token pen="254">move</Token>
    <Token pen="254">adda</Token>
    <Token pen="254">addq</Token>
    <Token pen="254">suba</Token>
    <Token pen="254">subq</Token>
    <Token pen="254">sub</Token>
    <Token pen="254">cmpa</Token>
    <Token pen="254">cmp</Token>
    <Token pen="254">lea</Token>
    <Token pen="254">pea</Token>
    <Token pen="254">movea</Token>
    <Token pen="254">abcd</Token>
    <Token pen="254">sbcd</Token>
    <Token pen="254">nbcd</Token>
    <Token pen="254">pack</Token>
    <Token pen="254">unpk</Token>
    <Token pen="254">tas</Token>
    <Token pen="254">cas</Token>
    <Token pen="254">cas2</Token>
    <Token pen="254">addi</Token>
    <Token pen="254">add</Token>
    <Token pen="254">addiwl</Token>
    <Token pen="254">addq</Token>
    <Token pen="254">addx</Token>
    <Token pen="254">sub</Token>
    <Token pen="254">subi</Token>
    <Token pen="254">subq</Token>
    <Token pen="254">subx</Token>
    <Token pen="254">tst</Token>
    <Token pen="254">cmp2</Token>
    <Token pen="254">cmpi</Token>
    <Token pen="254">cmpiwl</Token>
    <Token pen="254">cmpm</Token>
    <Token pen="254">neg</Token>
    <Token pen="254">negx</Token>
    <Token pen="254">mulu</Token>
    <Token pen="254">muls</Token>
    <Token pen="254">divu</Token>
    <Token pen="254">btst</Token>
    <Token pen="254">bset</Token>
    <Token pen="254">bchg</Token>
    <Token pen="254">bclr</Token>
    <Token pen="254">bftst</Token>
    <Token pen="254">bfchg</Token>
    <Token pen="254">bfset</Token>
    <Token pen="254">bfclr</Token>
    <Token pen="254">bfextu</Token>
    <Token pen="254">bfexts</Token>
    <Token pen="254">bfins</Token>
    <Token pen="254">bfffo</Token>
    <Token pen="254">and</Token>
    <Token pen="254">andi</Token>
    <Token pen="254">ori</Token>
    <Token pen="254">or</Token>
    <Token pen="254">eor</Token>
    <Token pen="254">eori</Token>
    <Token pen="254">not</Token>
    <Token pen="254">asr</Token>
    <Token pen="254">asl</Token>
    <Token pen="254">lsr</Token>
    <Token pen="254">lsl</Token>
    <Token pen="254">ror</Token>
    <Token pen="254">rol</Token>
    <Token pen="254">roxr</Token>
    <Token pen="254">roxl</Token>
    <Token pen="254">seq</Token>
    <Token pen="254">sne</Token>
    <Token pen="254">slo</Token>
    <Token pen="254">shi</Token>
    <Token pen="254">slt</Token>
    <Token pen="254">sgt</Token>
    <Token pen="254">dbra</Token>
    <Token pen="254">beq</Token>
    <Token pen="254">bne</Token>
    <Token pen="254">blo</Token>
    <Token pen="254">bhi</Token>
    <Token pen="254">blt</Token>
    <Token pen="254">bgt</Token>
    <Token pen="254">bra</Token>
    <Token pen="254">jmp</Token>
    <Token pen="254">jsr</Token>
    <Token pen="254">bsr</Token>
    <Token pen="254">rts</Token>
    <Token pen="254">rtd</Token>
    <Token pen="254">rtr</Token>
    <Token pen="254">link</Token>
    <Token pen="254">chk</Token>
    <Token pen="254">chk2</Token>
    <Token pen="254">unlk</Token>
    <Token pen="254">trap</Token>
    <Token pen="254">trapv</Token>
    <Token pen="254">trapeq</Token>
    <Token pen="254">trapne</Token>
    <Token pen="254">traplo</Token>
    <Token pen="254">traphi</Token>
    <Token pen="254">traplt</Token>
    <Token pen="254">trapgt</Token>
    <Token pen="254">exg</Token>
    <Token pen="254">swap</Token>
    <Token pen="254">clr</Token>
    <Token pen="254">moveq</Token>
    <Token pen="254">movem</Token>
    <Token pen="254">move16</Token>
    <Token pen="254">movep</Token>
    <Token pen="254">movex</Token>
    <Token pen="254">perm</Token>
    <Token pen="254">nop</Token>
    <Token pen="254">bkpt</Token>
    <Token pen="254">illegal</Token>
    <Token pen="254">touch</Token>
    <Token pen="254">rte</Token>
    <Token pen="254">moves</Token>
    <Token pen="254">movec</Token>
    <Token pen="254">reset</Token>
    <Token pen="254">stop</Token>
    <Token pen="254">divul</Token>
    <Token pen="254">divs</Token>
    <Token pen="254">divsl</Token>
    <Token pen="254">ext</Token>
    <Token pen="254">extb</Token>
    <Token pen="254">extub</Token>
    <Token pen="254">extuw</Token>
    <Token pen="254">load</Token>
    <Token pen="254">store</Token>
    <Token pen="254">storec</Token>
    <Token pen="254">storem</Token>
    <Token pen="254">storilm</Token>
    <Token pen="254">storem3</Token>
    <Token pen="254">packuswb</Token>
    <Token pen="254">pack3216</Token>
    <Token pen="254">unpack1232</Token>
    <Token pen="254">translo</Token>
    <Token pen="254">transhi</Token>
    <Token pen="254">padsb</Token>
    <Token pen="254">padsw</Token>
    <Token pen="254">pavgb</Token>
    <Token pen="254">pminb</Token>
    <Token pen="254">pminw</Token>
    <Token pen="254">pmaxb</Token>
    <Token pen="254">pmaxw</Token>
    <Token pen="254">paddb</Token>
    <Token pen="254">paddw</Token>
    <Token pen="254">paddusb</Token>
    <Token pen="254">paddusw</Token>
    <Token pen="254">psubb</Token>
    <Token pen="254">psubw</Token>
    <Token pen="254">psubusb</Token>
    <Token pen="254">psubusw</Token>
    <Token pen="254">bflzw</Token>
    <Token pen="254">pand</Token>
    <Token pen="254">por</Token>
    <Token pen="254">peor</Token>
    <Token pen="254">pandn</Token>
    <Token pen="254">pmul88</Token>
    <Token pen="254">pmula</Token>
    <Token pen="254">pmulh</Token>
    <Token pen="254">pmull</Token>
    <Token pen="254">lsrq</Token>
    <Token pen="254">lslq</Token>
    <Token pen="254">c2p</Token>
    <Token pen="254">bsel</Token>
    <Token pen="254">minterm</Token>
    <Token pen="254">vperm</Token>
    <Token pen="254">tex8</Token>
    <Token pen="254">tex16</Token>
    <Token pen="254">tex24</Token>
    <Token pen="254">pcmpeqb</Token>
    <Token pen="254">pcmpgtb</Token>
    <Token pen="254">pcmpgeb</Token>
    <Token pen="254">pcmphib</Token>
    <Token pen="254">pcmpeqw</Token>
    <Token pen="254">pcmpgtw</Token>
    <Token pen="254">pcmpgew</Token>
    <Token pen="254">pcmphiw</Token>
    <Token pen="254">fint</Token>
    <Token pen="254">fintrz</Token>
    <Token pen="254">fabs</Token>
    <Token pen="254">ftst</Token>
    <Token pen="254">fcmp</Token>
    <Token pen="254">fadd</Token>
    <Token pen="254">fsub</Token>
    <Token pen="254">fmul</Token>
    <Token pen="254">fdiv</Token>
    <Token pen="254">fsqrt</Token>
    <Token pen="254">fseq</Token>
    <Token pen="254">fsne</Token>
    <Token pen="254">fslo</Token>
    <Token pen="254">fshi</Token>
    <Token pen="254">fslt</Token>
    <Token pen="254">fsgt</Token>
    <Token pen="254">fbeq</Token>
    <Token pen="254">fbne</Token>
    <Token pen="254">fblo</Token>
    <Token pen="254">fbhi</Token>
    <Token pen="254">fblt</Token>
    <Token pen="254">fbgt</Token>
    <Token pen="254">fdbeq</Token>
    <Token pen="254">fdbne</Token>
    <Token pen="254">fdblo</Token>
    <Token pen="254">fdbhi</Token>
    <Token pen="254">fdblt</Token>
    <Token pen="254">fdbgt</Token>
    <Token pen="254">ftrapeq</Token>
    <Token pen="254">ftrapne</Token>
    <Token pen="254">ftraplo</Token>
    <Token pen="254">ftraphi</Token>
    <Token pen="254">ftraplt</Token>
    <Token pen="254">ftrapgt</Token>
    <Token pen="254">fnop</Token>
    <Token pen="254">fmovecr</Token>
    <Token pen="254">fmovem</Token>
    <Token pen="254">fmove</Token>
    <Token pen="254">fsave</Token>
    <Token pen="254">frestore</Token>
    <Token pen="254">facos</Token>
    <Token pen="254">fasin</Token>
    <Token pen="254">fatan</Token>
    <Token pen="254">fatanh</Token>
    <Token pen="254">fcos</Token>
    <Token pen="254">fcosh</Token>
    <Token pen="254">fetox</Token>
    <Token pen="254">fetoxm1</Token>
    <Token pen="254">fgetexp</Token>
    <Token pen="254">fgetman</Token>
    <Token pen="254">flog10</Token>
    <Token pen="254">flog2</Token>
    <Token pen="254">flogn</Token>
    <Token pen="254">flognp1</Token>
    <Token pen="254">fmod</Token>
    <Token pen="254">frem</Token>
    <Token pen="254">fscale</Token>
    <Token pen="254">fsin</Token>
    <Token pen="254">fsincos</Token>
    <Token pen="254">fsinh</Token>
    <Token pen="254">ftan</Token>
    <Token pen="254">ftanh</Token>
    <Token pen="254">ftentox</Token>
    <Token pen="254">ftwotox</Token>
    <Token pen="254">dc</Token>
    <Token pen="254">ds</Token>


    <!--numbers-->

    <ComplexToken type="hexnumber">
      <Token pen="71">$</Token>
    </ComplexToken>
    <ComplexToken type="binnumber">
      <Token pen="71">%</Token>
    </ComplexToken>
    <ComplexToken type="decnumber">
      <Token pen="71"/>
    </ComplexToken>
    
    <Token pen="173">d0</Token>
    <Token pen="173">d1</Token>
    <Token pen="173">d2</Token>
    <Token pen="173">d3</Token>
    <Token pen="173">d4</Token>
    <Token pen="173">d5</Token>
    <Token pen="173">d6</Token>
    <Token pen="173">d7</Token>
    <Token pen="173">a0</Token>
    <Token pen="173">a1</Token>
    <Token pen="173">a2</Token>
    <Token pen="173">a3</Token>
    <Token pen="173">a4</Token>
    <Token pen="173">a5</Token>
    <Token pen="173">a6</Token>
    <Token pen="173">a7</Token>
    <Token pen="173">e0</Token>
    <Token pen="173">e1</Token>
    <Token pen="173">e2</Token>
    <Token pen="173">e3</Token>
    <Token pen="173">e4</Token>
    <Token pen="173">e5</Token>
    <Token pen="173">e6</Token>
    <Token pen="173">e7</Token>
    <Token pen="173">b0</Token>
    <Token pen="173">b1</Token>
    <Token pen="173">b2</Token>
    <Token pen="173">b3</Token>
    <Token pen="173">b4</Token>
    <Token pen="173">b5</Token>
    <Token pen="173">b6</Token>
    <Token pen="173">b7</Token>
    <Token pen="173">e8</Token>
    <Token pen="173">e9</Token>
    <Token pen="173">e10</Token>
    <Token pen="173">e11</Token>
    <Token pen="173">e12</Token>
    <Token pen="173">e13</Token>
    <Token pen="173">e14</Token>
    <Token pen="173">e15</Token>
    <Token pen="173">e16</Token>
    <Token pen="173">e17</Token>
    <Token pen="173">e18</Token>
    <Token pen="173">e19</Token>
    <Token pen="173">e20</Token>
    <Token pen="173">e21</Token>
    <Token pen="173">e22</Token>
    <Token pen="173">e23</Token>
    <Token pen="173">sp</Token>
    <Token pen="173">fp0</Token>
    <Token pen="173">fp1</Token>
    <Token pen="173">fp2</Token>
    <Token pen="173">fp3</Token>
    <Token pen="173">fp4</Token>
    <Token pen="173">fp5</Token>
    <Token pen="173">fp6</Token>
    <Token pen="173">fp7</Token>

    <Token style="bold" pen="37">xdef</Token>
    <Token style="bold" pen="37">XDEF</Token>
    <Token style="bold" pen="37">section</Token>
    <Token style="bold" pen="37">SECTION</Token>
    <Token style="bold" pen="37">end</Token>
    <Token style="bold" pen="37">END</Token>
    <Token style="bold" pen="37">equ</Token>
    <Token style="bold" pen="37">EQU</Token>

    <Token pen="2" bgpen="4">:=</Token>
    <Token>()</Token>
    <Token>==</Token>
    <Token>!=</Token>
    <Token><![CDATA[<=]]></Token>
    <Token>>=</Token>
    <Token style="bold" absolute="true">(</Token>
    <Token style="bold" absolute="true">)</Token>
<!--    
    <Token style="bold">;</Token>
-->    
    <Token style="bold">,</Token>
    <Token style="bold" pen="253" absolute="true">{</Token>
    <Token style="bold" pen="253" absolute="true">}</Token>
    <Token pen="253">-></Token>
    <!--Variable altering operators:-->
    <Token pen="2">=</Token>
    <Token pen="2">+=</Token>
    <Token pen="2">-=</Token>
    <Token pen="2">*=</Token>
    <Token pen="2">/=</Token>
    <Token pen="2">|=</Token>
    <Token pen="2"><![CDATA[&=]]></Token>
    <Token pen="2"><![CDATA[<<=]]></Token>
    <Token pen="2"><![CDATA[>>=]]></Token>
    <Token pen="2">++</Token>
    <Token pen="2">--</Token>
    <!--String and char-const tokens:-->
    <ComplexToken>
      <Token pen="166">&quot;</Token>
      <MatchToToken>&quot;</MatchToToken>
      <MatchToEOL/>
    </ComplexToken>
    <ComplexToken>
      <Token pen="47">&apos;</Token>
      <MatchToToken>&apos;</MatchToToken>
      <MatchToEOL/>
    </ComplexToken>
    
    <!--Comments...-->
    <ComplexToken>
      <Token pen="166" style="italic">//</Token>
      <MatchToEOL/>
    </ComplexToken>
    <ComplexToken>
      <Token pen="166" absolute="true">/*</Token>
      <MatchToToken>*/</MatchToToken>
      <MultiLine/>
    </ComplexToken>
    <Token pen="2" bgpen="4">*/</Token>
    <!--Preprocessing directives...-->
<!--

    <ComplexToken type="alpha">
      <Token pen="166">#</Token>
    </ComplexToken>
-->
    <!--comments-->
<!--    
    <ComplexToken>
      <Token pen="166">*</Token>
      <MatchToEOL/>
    </ComplexToken>
-->
    <ComplexToken>
      <Token pen="166" type="alpha">;</Token>
      <MatchToEOL/>
    </ComplexToken>
    <ComplexToken>
      <Token pen="166" type="alpha">*</Token>
      <MatchToEOL/>
    </ComplexToken>

    <!--underscore labels-->
<!--
    <ComplexToken>
      <Token pen="166" type="alpha">_</Token>
      <MatchToToken>:</MatchToToken>
    </ComplexToken>
-->
    <ComplexToken>
      <Token style="bold" pen="58" type="alphanum"/>
      <MatchToToken>b</MatchToToken>
    </ComplexToken>

    <!--Local labels-->
<!--
    <ComplexToken>
      <Token pen="166" type="alpha">.</Token>
      <MatchToToken>:</MatchToToken>
    </ComplexToken>
    <ComplexToken>
      <Token pen="166" type="alpha">.</Token>
      <MatchToToken>;</MatchToToken>
    </ComplexToken>
    <ComplexToken>
      <Token pen="166" type="alpha">.</Token>
      <MatchToEOL/>
    </ComplexToken>
-->
  </Syntax>

</Ann-SyntaxHighlighting>
